// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4242.RB_AAssistComm;

import org.usfirst.frc4242.RB_AAssistComm.commands.*;
import org.usfirst.frc4242.RB_AAssistComm.Robot;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton jS1;
    public JoystickButton jS5;
    public JoystickButton jS3;
    public Joystick jS;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        jS = new Joystick(1);
        
        jS3 = new JoystickButton(jS, 3);
        jS3.whenPressed(new ArmToggle());
        jS5 = new JoystickButton(jS, 5);
        jS5.whenPressed(new RollerToggle());
        jS1 = new JoystickButton(jS, 1);
        jS1.whenPressed(new FireKicker());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("FireKicker", new FireKicker());
        SmartDashboard.putData("RollerToggle", new RollerToggle());
        SmartDashboard.putData("PullKicker", new PullKicker());
        SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());
        SmartDashboard.putData("ArmToggle", new ArmToggle());
        SmartDashboard.putData("a_DriveFor", new a_DriveFor());
        SmartDashboard.putData("AutoMode", new AutoMode());
        SmartDashboard.putData("StopDrivetrain", new StopDrivetrain());
        SmartDashboard.putData("a_DriveBack", new a_DriveBack());
        
        SmartDashboard.putData("Arm", Robot.arm);
        SmartDashboard.putData("Drivetrain", Robot.drivetrain);
        SmartDashboard.putData("Kicker", Robot.kicker);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJS() {
        return jS;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

